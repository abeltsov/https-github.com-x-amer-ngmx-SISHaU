//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------


using SISHaU.DataAccess.Definition;

namespace Integration.BaseDto
{


    /// <remarks/>
    public class AttachmentTypeDto : EntityDto
    {
        
        public virtual string Name{get;set;}
        
        public virtual string Description{get;set;}
        
        public virtual AttachmentDto Attachment{get;set;}
        
        public virtual string AttachmentHASH{get;set;}
    }
    
    /// <remarks/>
    public class AttachmentDto : EntityDto
    {
        
        public virtual string AttachmentGUID{get;set;}
    }
    
    /// <remarks/>
    public class ErrorMessageTypeDto : EntityDto
    {
        
        public virtual string ErrorCode{get;set;}
        
        public virtual string Description{get;set;}
        
        public virtual string StackTrace{get;set;}
    }
    
    /// <remarks/>
    public class CommonResultTypeDto : EntityDto
    {
        
        public virtual string GUID{get;set;}
        
        public virtual string TransportGUID{get;set;}
        
        public virtual CommonResultTypeErrorDto Error{get;set;}
        
        public virtual string UniqueNumber{get;set;}
        
        public virtual System.DateTime UpdateDate{get;set;}
    }
    
    /// <remarks/>
    public class CommonResultTypeErrorDto : ErrorMessageTypeDto
    {
    }
    
    /// <remarks/>
    public class BaseAsyncResponseTypeDto : EntityDto
    {
        
        public virtual sbyte RequestState{get;set;}
        
        public virtual string MessageGUID{get;set;}
    }
    
    /// <remarks/>
    public class getStateRequestDto : EntityDto
    {
        
        public virtual string MessageGUID{get;set;}
    }
    
    /// <remarks/>
    public class AckRequestDto : EntityDto
    {
        
        public virtual AckRequestAckDto Ack{get;set;}
    }
    
    /// <remarks/>
    public class AckRequestAckDto : EntityDto
    {
        
        public virtual string MessageGUID{get;set;}
        
        public virtual string RequesterMessageGUID{get;set;}
    }
    
    /// <remarks/>
    public class DocumentPortalTypeDto : EntityDto
    {
        
        public virtual string Name{get;set;}
        
        public virtual string DocNumber{get;set;}
        
        public virtual System.DateTime ApproveDate{get;set;}
        
        public virtual AttachmentTypeDto Attachment{get;set;}
    }
    
    /// <remarks/>
    public class OKTMORefTypeDto : EntityDto
    {
        
        public virtual string code{get;set;}
        
        public virtual string name{get;set;}
    }
    
    /// <remarks/>
    public class RegionTypeDto : EntityDto
    {
        
        public virtual string code{get;set;}
        
        public virtual string name{get;set;}
    }
    
    /// <remarks/>
    public class ResultTypeDto : EntityDto
    {
        
        public virtual string TransportGUID{get;set;}
        
        public virtual string UpdateGUID{get;set;}
        
        public virtual ErrorMessageTypeDto CreateOrUpdateError{get;set;}
        
        public virtual string GUID{get;set;}
        
        public virtual string UniqueNumber{get;set;}
        
        public virtual System.DateTime UpdateDate{get;set;}
    }
    
    /// <remarks/>
    public class ImportResultDtoBase : EntityDto
    {
        
        public virtual CommonResultTypeDto CommonResult{get;set;}
        
        public virtual ErrorMessageTypeDto ErrorMessage{get;set;}
    }
    
    /// <remarks/>
    public class ImportResult1Dto : EntityDto
    {
        
        public virtual CommonResultTypeDto CommonResult{get;set;}
        
        public virtual ErrorMessageTypeDto ErrorMessage{get;set;}
    }
    
    /// <remarks/>
    public class AttachmentTypeDtoMap : MapAction<AttachmentTypeDto>
    {
        
        public AttachmentTypeDtoMap() : 
                base("Base.AttachmentType", id => id.Id)
        {
            Map(map => map.Name);
            Map(map => map.Description);
            References(r => r.Attachment);
            Map(map => map.AttachmentHASH);
        }
    }
    
    /// <remarks/>
    public class AttachmentDtoMap : MapAction<AttachmentDto>
    {
        
        public AttachmentDtoMap() : 
                base("Base.Attachment", id => id.Id)
        {
            Map(map => map.AttachmentGUID);
        }
    }
    
    /// <remarks/>
    public class ErrorMessageTypeDtoMap : MapAction<ErrorMessageTypeDto>
    {
        
        public ErrorMessageTypeDtoMap() : 
                base("Base.ErrorMessageType", id => id.Id)
        {
            Map(map => map.ErrorCode);
            Map(map => map.Description).Length(16384);
            Map(map => map.StackTrace).Length(16384);
        }
    }
    
    /// <remarks/>
    public class CommonResultTypeDtoMap : MapAction<CommonResultTypeDto>
    {
        
        public CommonResultTypeDtoMap() : 
                base("Base.CommonResultType", id => id.Id)
        {
            Map(map => map.GUID);
            Map(map => map.TransportGUID);
            References(r => r.Error);
            Map(map => map.UniqueNumber);
            Map(map => map.UpdateDate);
        }
    }
    
    /// <remarks/>
    public class CommonResultTypeErrorDtoMap : MapAction<CommonResultTypeErrorDto>
    {
        
        public CommonResultTypeErrorDtoMap() : 
                base("Base.CommonResultTypeError", id => id.Id)
        {
        }
    }
    
    /// <remarks/>
    public class BaseAsyncResponseTypeDtoMap : MapAction<BaseAsyncResponseTypeDto>
    {
        
        public BaseAsyncResponseTypeDtoMap() : 
                base("Base.BaseAsyncResponseType", id => id.Id)
        {
            Map(map => map.RequestState).CustomType<int>();
            Map(map => map.MessageGUID);
        }
    }
    
    /// <remarks/>
    public class getStateRequestDtoMap : MapAction<getStateRequestDto>
    {
        
        public getStateRequestDtoMap() : 
                base("Base.getStateRequest", id => id.Id)
        {
            Map(map => map.MessageGUID);
        }
    }
    
    /// <remarks/>
    public class AckRequestDtoMap : MapAction<AckRequestDto>
    {
        
        public AckRequestDtoMap() : 
                base("Base.AckRequest", id => id.Id)
        {
            References(r => r.Ack);
        }
    }
    
    /// <remarks/>
    public class AckRequestAckDtoMap : MapAction<AckRequestAckDto>
    {
        
        public AckRequestAckDtoMap() : 
                base("Base.AckRequestAck", id => id.Id)
        {
            Map(map => map.MessageGUID);
            Map(map => map.RequesterMessageGUID);
        }
    }
    
    /// <remarks/>
    public class DocumentPortalTypeDtoMap : MapAction<DocumentPortalTypeDto>
    {
        
        public DocumentPortalTypeDtoMap() : 
                base("Base.DocumentPortalType", id => id.Id)
        {
            Map(map => map.Name);
            Map(map => map.DocNumber);
            Map(map => map.ApproveDate);
            References(r => r.Attachment);
        }
    }
    
    /// <remarks/>
    public class OKTMORefTypeDtoMap : MapAction<OKTMORefTypeDto>
    {
        
        public OKTMORefTypeDtoMap() : 
                base("Base.OKTMORefType", id => id.Id)
        {
            Map(map => map.code);
            Map(map => map.name);
        }
    }
    
    /// <remarks/>
    public class RegionTypeDtoMap : MapAction<RegionTypeDto>
    {
        
        public RegionTypeDtoMap() : 
                base("Base.RegionType", id => id.Id)
        {
            Map(map => map.code);
            Map(map => map.name);
        }
    }
    
    /// <remarks/>
    public class ResultTypeDtoMap : MapAction<ResultTypeDto>
    {
        
        public ResultTypeDtoMap() : 
                base("Base.ResultType", id => id.Id)
        {
            Map(map => map.TransportGUID);
            Map(map => map.UpdateGUID);
            References(r => r.CreateOrUpdateError);
            Map(map => map.GUID);
            Map(map => map.UniqueNumber);
            Map(map => map.UpdateDate);
        }
    }
    
    /// <remarks/>
    public class ImportResultDtoMap : MapAction<ImportResultDtoBase>
    {
        
        public ImportResultDtoMap() : 
                base("Base.ImportResult", id => id.Id)
        {
            References(r => r.CommonResult);
            References(r => r.ErrorMessage);
        }
    }
}
