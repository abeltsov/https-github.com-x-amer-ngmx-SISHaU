//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using Integration.Base;
using Integration.DeviceMetering;


namespace Integration.DeviceMeteringServiceAsync
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://dom.gosuslugi.ru/schema/integration/device-metering-service-async/", ConfigurationName="DeviceMeteringPortTypesAsync")]
    public interface DeviceMeteringPortTypesAsync
    {
        
        // CODEGEN: Контракт генерации сообщений с операцией importMeteringDeviceValues не является ни RPC, ни упакованным документом.
        [System.ServiceModel.OperationContractAttribute(Action="urn:importMeteringDeviceValues", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(Fault), Action="urn:importMeteringDeviceValues", Name="Fault", Namespace="http://dom.gosuslugi.ru/schema/integration/base/")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BaseType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExportElectricMeteringValueKindType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExportOneRateMeteringValueKindType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(HeaderType))]
        importMeteringDeviceValuesResponseMessage importMeteringDeviceValues(importMeteringDeviceValuesRequestMessage request);
        
        // CODEGEN: Контракт генерации сообщений с операцией exportMeteringDeviceHistory не является ни RPC, ни упакованным документом.
        [System.ServiceModel.OperationContractAttribute(Action="urn:exportMeteringDeviceHistory", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(Fault), Action="urn:exportMeteringDeviceHistory", Name="Fault", Namespace="http://dom.gosuslugi.ru/schema/integration/base/")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BaseType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExportElectricMeteringValueKindType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExportOneRateMeteringValueKindType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(HeaderType))]
        exportMeteringDeviceHistoryResponseMessage exportMeteringDeviceHistory(exportMeteringDeviceHistoryRequestMessage request);
        
        // CODEGEN: Контракт генерации сообщений с операцией getState не является ни RPC, ни упакованным документом.
        [System.ServiceModel.OperationContractAttribute(Action="urn:getState", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(Fault), Action="urn:getState", Name="Fault", Namespace="http://dom.gosuslugi.ru/schema/integration/base/")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BaseType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExportElectricMeteringValueKindType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExportOneRateMeteringValueKindType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(HeaderType))]
        getStateResponseMessage getState(getStateRequestMessage request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public class importMeteringDeviceValuesRequestMessage
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://dom.gosuslugi.ru/schema/integration/base/")]
        public RequestHeader RequestHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="importMeteringDeviceValuesRequest", Namespace="http://dom.gosuslugi.ru/schema/integration/device-metering/", Order=0)]
        public importMeteringDeviceValuesRequest importMeteringDeviceValuesRequest1;
        
        public importMeteringDeviceValuesRequestMessage()
        {
        }
        
        public importMeteringDeviceValuesRequestMessage(RequestHeader RequestHeader, importMeteringDeviceValuesRequest importMeteringDeviceValuesRequest1)
        {
            this.RequestHeader = RequestHeader;
            this.importMeteringDeviceValuesRequest1 = importMeteringDeviceValuesRequest1;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public class importMeteringDeviceValuesResponseMessage
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://dom.gosuslugi.ru/schema/integration/base/")]
        public ResultHeader ResultHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://dom.gosuslugi.ru/schema/integration/base/", Order=0)]
        public AckRequest AckRequest;
        
        public importMeteringDeviceValuesResponseMessage()
        {
        }
        
        public importMeteringDeviceValuesResponseMessage(ResultHeader ResultHeader, AckRequest AckRequest)
        {
            this.ResultHeader = ResultHeader;
            this.AckRequest = AckRequest;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public class exportMeteringDeviceHistoryRequestMessage
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://dom.gosuslugi.ru/schema/integration/base/")]
        public RequestHeader RequestHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="exportMeteringDeviceHistoryRequest", Namespace="http://dom.gosuslugi.ru/schema/integration/device-metering/", Order=0)]
        public exportMeteringDeviceHistoryRequest exportMeteringDeviceHistoryRequest1;
        
        public exportMeteringDeviceHistoryRequestMessage()
        {
        }
        
        public exportMeteringDeviceHistoryRequestMessage(RequestHeader RequestHeader, exportMeteringDeviceHistoryRequest exportMeteringDeviceHistoryRequest1)
        {
            this.RequestHeader = RequestHeader;
            this.exportMeteringDeviceHistoryRequest1 = exportMeteringDeviceHistoryRequest1;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public class exportMeteringDeviceHistoryResponseMessage
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://dom.gosuslugi.ru/schema/integration/base/")]
        public ResultHeader ResultHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://dom.gosuslugi.ru/schema/integration/base/", Order=0)]
        public AckRequest AckRequest;
        
        public exportMeteringDeviceHistoryResponseMessage()
        {
        }
        
        public exportMeteringDeviceHistoryResponseMessage(ResultHeader ResultHeader, AckRequest AckRequest)
        {
            this.ResultHeader = ResultHeader;
            this.AckRequest = AckRequest;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public class getStateRequestMessage
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://dom.gosuslugi.ru/schema/integration/base/")]
        public RequestHeader RequestHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="getStateRequest", Namespace="http://dom.gosuslugi.ru/schema/integration/base/", Order=0)]
        public getStateRequest getStateRequest1;
        
        public getStateRequestMessage()
        {
        }
        
        public getStateRequestMessage(RequestHeader RequestHeader, getStateRequest getStateRequest1)
        {
            this.RequestHeader = RequestHeader;
            this.getStateRequest1 = getStateRequest1;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public class getStateResponseMessage
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://dom.gosuslugi.ru/schema/integration/base/")]
        public ResultHeader ResultHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://dom.gosuslugi.ru/schema/integration/device-metering/", Order=0)]
        public getStateResult getStateResult;
        
        public getStateResponseMessage()
        {
        }
        
        public getStateResponseMessage(ResultHeader ResultHeader, getStateResult getStateResult)
        {
            this.ResultHeader = ResultHeader;
            this.getStateResult = getStateResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DeviceMeteringPortTypesAsyncChannel : DeviceMeteringPortTypesAsync, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public class DeviceMeteringPortTypesAsyncClient : System.ServiceModel.ClientBase<DeviceMeteringPortTypesAsync>, DeviceMeteringPortTypesAsync
    {
        
        public DeviceMeteringPortTypesAsyncClient()
        {
        }
        
        public DeviceMeteringPortTypesAsyncClient(string endpointConfigurationName) : 
                base(endpointConfigurationName)
        {
        }
        
        public DeviceMeteringPortTypesAsyncClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public DeviceMeteringPortTypesAsyncClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public DeviceMeteringPortTypesAsyncClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importMeteringDeviceValuesResponseMessage DeviceMeteringPortTypesAsync.importMeteringDeviceValues(importMeteringDeviceValuesRequestMessage request)
        {
            return base.Channel.importMeteringDeviceValues(request);
        }
        
        public ResultHeader importMeteringDeviceValues(RequestHeader RequestHeader, importMeteringDeviceValuesRequest importMeteringDeviceValuesRequest1, out AckRequest AckRequest)
        {
            importMeteringDeviceValuesRequestMessage inValue = new importMeteringDeviceValuesRequestMessage();
            inValue.RequestHeader = RequestHeader;
            inValue.importMeteringDeviceValuesRequest1 = importMeteringDeviceValuesRequest1;
            importMeteringDeviceValuesResponseMessage retVal = ((DeviceMeteringPortTypesAsync)(this)).importMeteringDeviceValues(inValue);
            AckRequest = retVal.AckRequest;
            return retVal.ResultHeader;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        exportMeteringDeviceHistoryResponseMessage DeviceMeteringPortTypesAsync.exportMeteringDeviceHistory(exportMeteringDeviceHistoryRequestMessage request)
        {
            return base.Channel.exportMeteringDeviceHistory(request);
        }
        
        public ResultHeader exportMeteringDeviceHistory(RequestHeader RequestHeader, exportMeteringDeviceHistoryRequest exportMeteringDeviceHistoryRequest1, out AckRequest AckRequest)
        {
            exportMeteringDeviceHistoryRequestMessage inValue = new exportMeteringDeviceHistoryRequestMessage();
            inValue.RequestHeader = RequestHeader;
            inValue.exportMeteringDeviceHistoryRequest1 = exportMeteringDeviceHistoryRequest1;
            exportMeteringDeviceHistoryResponseMessage retVal = ((DeviceMeteringPortTypesAsync)(this)).exportMeteringDeviceHistory(inValue);
            AckRequest = retVal.AckRequest;
            return retVal.ResultHeader;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        getStateResponseMessage DeviceMeteringPortTypesAsync.getState(getStateRequestMessage request)
        {
            return base.Channel.getState(request);
        }
        
        public ResultHeader getState(RequestHeader RequestHeader, getStateRequest getStateRequest1, out getStateResult getStateResult)
        {
            getStateRequestMessage inValue = new getStateRequestMessage();
            inValue.RequestHeader = RequestHeader;
            inValue.getStateRequest1 = getStateRequest1;
            getStateResponseMessage retVal = ((DeviceMeteringPortTypesAsync)(this)).getState(inValue);
            getStateResult = retVal.getStateResult;
            return retVal.ResultHeader;
        }
    }
}
